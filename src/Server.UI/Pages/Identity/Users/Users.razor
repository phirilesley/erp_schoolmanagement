@page "/identity/users"
@using CleanArchitecture.Blazor.Server.UI.Services.Fusion
@using Microsoft.AspNetCore.WebUtilities
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Application.Features.Identity.DTOs
@using CleanArchitecture.Blazor.Application.Features.Identity.Notifications.ResetPassword
@using CleanArchitecture.Blazor.Application.Features.Identity.Notifications.SendWelcome
@using System.Security.Claims
@using System.Text
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using CleanArchitecture.Blazor.Application.Common.Interfaces.MultiTenant
@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Roles.Components
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Users.Components
@using System.ComponentModel
@using System.Linq.Expressions
@using CleanArchitecture.Blazor.Infrastructure.Constants.Role
@using System.Reflection
@using CleanArchitecture.Blazor.Infrastructure.Constants.ClaimTypes
@using ZiggyCreatures.Caching.Fusion

@attribute [Authorize(Policy = Permissions.Users.View)]
@inherits OwningComponentBase
@implements IDisposable
@inject IUsersStateContainer UsersStateContainer
@inject IOnlineUserTracker OnlineUserTracker
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IUserService UserService
@inject ITenantService TenantsService
@inject IFusionCache FusionCache;
@inject IExcelService ExcelService
@inject IMailService MailService
@inject IStringLocalizer<Users> L
@inject ILogger<Users> Logger
<PageTitle>@Title</PageTitle>

<MudDataGrid @ref="_table"
             FixedHeader="true"
             FixedFooter="false"
             Height="calc(100vh - 300px)"
             @bind-RowsPerPage="_defaultPageSize"
             Hover="true"
             MultiSelection="true"
             @bind-SelectedItems="_selectedItems"
             Loading="@_loading"
             ServerData="@(ServerReload)">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.SwitchAccount" Size="Size.Large"/>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption" Class="mb-2">@L[_currentDto.GetClassDescription()]</MudText>
                    <MudSelect T="string" Style="min-width:120px" ValueChanged="OnChangedListView"  Value="@_selectedTenantId" Dense="true" Label="List View">
                        <MudSelectItem T="string" Value="@(" ")">@L["ALL"]</MudSelectItem>
                        @foreach(var item in TenantsService.DataSource)
                        {
                            <MudSelectItem T="string" Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </div>
            <div class="flex-grow-1"/>
            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(OnRefresh)"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">
                            @ConstantString.Refresh
                        </MudButton>
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       OnClick="OnCreate"
                                       IconColor="Color.Surface">
                                @ConstantString.New
                            </MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Disabled="@(!(_selectedItems.Count > 0))"
                                       Size="Size.Small"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       OnClick="OnDeleteChecked"
                                       IconColor="Color.Surface">
                                @ConstantString.Delete
                            </MudButton>
                        }
                        @if (_canExport)
                        {
                            <MudLoadingButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                              StartIcon="@Icons.Material.Filled.Download"
                                              Size="Size.Small"
                                              @bind-Loading="_exporting" LoadingAdornment="Adornment.Start" OnClick="OnExport"
                                              Style="margin-right: 4px; margin-bottom:4px"
                                              IconColor="Color.Surface">
                                @ConstantString.Export
                            </MudLoadingButton>
                        }
                        @if (_canImport)
                        {
                            <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx" Style="margin-top:0px;">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Size="Size.Small"
                                               Variant="Variant.Outlined"
                                               Color="Color.Primary"
                                               Disabled="@_loading"
                                               StartIcon="@Icons.Material.Filled.Upload"
                                               for="@context">
                                        @if (_uploading)
                                        {
                                            <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                                            @ConstantString.Uploading
                                        }
                                        else
                                        {
                                            @ConstantString.Import
                                        }
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       OnClick="OnCreate"
                                       IconColor="Color.Surface">
                                @ConstantString.New
                            </MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Disabled="@(!(_selectedItems.Count > 0))"
                                       Size="Size.Small"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       OnClick="OnDeleteChecked"
                                       IconColor="Color.Surface">
                                @ConstantString.Delete
                            </MudButton>
                        }
                    </MudHidden>
                </div>
                @if (_canSearch)
                {
                    <MudStack Row="true" AlignItems="AlignItems.Stretch">
                        <MudSelect T="string" Placeholder="Search for role name" Value="@_searchRole" Clearable="true" ValueChanged="@(OnSearchRole)" Style="width:150px">
                            @foreach (var str in _roles)
                            {
                                <MudSelectItem Value="@str">@str</MudSelectItem>
                            }
                        </MudSelect>
                        <MudHidden Breakpoint="Breakpoint.SmAndDown">
                            <MudTextField T="string" Immediate="false" ValueChanged="@(OnSearch)" Value="@_searchString" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                            </MudTextField>
                        </MudHidden>
                    </MudStack>
                }

            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>
        <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                @if (_canEdit || _canDelete || _canManageRoles || _canRestPassword || _canActive || _canManagePermissions)
                {
                    <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                        @if (_canEdit)
                        {
                            <MudMenuItem OnAction="@(() => OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                        }
                        @if (_canDelete)
                        {
                            <MudMenuItem OnAction="@(() => OnDelete(context.Item))">@ConstantString.Delete</MudMenuItem>
                        }
                        @if (_canManagePermissions)
                        {
                            <MudMenuItem OnAction="@(() => OnSetPermissions(context.Item))">@L["Set Permissions"]</MudMenuItem>
                        }
                        @if (_canActive)
                        {
                            @if (context.Item.IsActive)
                            {
                                <MudMenuItem OnAction=@(() => OnSetActive(context.Item))>@L["Set Inactive"]</MudMenuItem>
                            }
                            else
                            {
                                <MudMenuItem OnAction=@(() => OnSetActive(context.Item))>@L["Set Active"]</MudMenuItem>
                            }
                        }
                        @if (_canRestPassword)
                        {
                            <MudMenuItem Disabled="@(!context.Item.IsActive)" OnAction=@(() => OnResetPassword(context.Item))>@L["Reset Password"]</MudMenuItem>
                        }
                    </MudMenu>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                        @ConstantString.NoAllowed
                    </MudButton>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.TenantId" HeaderStyle="width:260px" Title="@L[_currentDto.GetMemberDescription(x => x.TenantName)]">
            <CellTemplate>
                <div>
                    <MudText Typo="Typo.body2">@context.Item.TenantName</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.TenantId</MudText>
                </div>
            </CellTemplate>
            <FooterTemplate>
                @L["Selected"]: @_selectedItems.Count
            </FooterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.UserName" Title="@L[_currentDto.GetMemberDescription(x => x.UserName)]">
            <CellTemplate>
                <div class="d-flex align-items-center">
                    <MudBadge Color="@(IsOnline(context.Item.UserName) ? Color.Success : Color.Error)" Overlap="false" Dot="true" Bordered="true">
                        <MudAvatar>
                            @if (string.IsNullOrEmpty(context.Item.ProfilePictureDataUrl))
                            {
                                @context.Item.UserName.First()
                            }
                            else
                            {
                                <MudImage Src="@context.Item.ProfilePictureDataUrl"></MudImage>
                            }
                        </MudAvatar>
                    </MudBadge>
                    <div class="pl-3">
                        <MudText Class="ml-2 align-self-center">@context.Item.UserName</MudText>
                        <MudText Typo="Typo.body2" Class="ml-2 align-self-center mud-text-secondary">@context.Item.Email</MudText>
                    </div>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Email" Title="@L["Display Name / PhoneNumber"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@context.Item.DisplayName</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.PhoneNumber</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.SuperiorId" Title="@L[_currentDto.GetMemberDescription(x => x.SuperiorName)]">
            <CellTemplate>
                @context.Item.SuperiorName
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Provider" Title="@L[_currentDto.GetMemberDescription(x => x.Provider)]"/>

        <PropertyColumn Sortable="false" Property="x => x.AssignedRoles" Title="@L[_currentDto.GetMemberDescription(x => x.AssignedRoles)]">
            <CellTemplate>
                @if (context.Item.AssignedRoles is not null)
                {
                    foreach (var str in context.Item.AssignedRoles)
                    {
                        <MudChip Size="Size.Small" Variant="Variant.Text">@str</MudChip>
                    }
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.IsActive" Title="@L[_currentDto.GetMemberDescription(x => x.IsActive)]">
            <CellTemplate>
                <div>
                    @if (context.Item.IsActive)
                    {
                        <MudChip Color="Color.Success" Size="Size.Small" Icon="@Icons.Material.Filled.CheckCircleOutline">@L["Active"]</MudChip>
                        @if (context.Item.LockoutEnd is not null)
                        {
                            <div class="d-flex">
                                <p>@L["Lockout End"]: </p>
                                <ToLocal DateTime="@context.Item.LockoutEnd.Value.UtcDateTime.ToLocalTime()" Format="dd/mm/yyyy HH:MM:ss"></ToLocal>
                            </div>
                        }
                    }
                    else
                    {
                        <MudChip Class="flex-grow-0" Color="Color.Surface" Size="Size.Small" Icon="@Icons.Material.Filled.HighlightOff">@L["Inactive"]</MudChip>
                        @if (context.Item.LockoutEnd is not null)
                        {
                            <div class="d-flex">
                                <p>@L["Lockout End"]: </p>
                                <ToLocal DateTime="@context.Item.LockoutEnd.Value.UtcDateTime.ToLocalTime()" Format="dd/mm/yyyy HH:MM:ss"></ToLocal>
                            </div>
                        }
                    }
                </div>
            </CellTemplate>
        </PropertyColumn>

    </Columns>

    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50, 100, 500, 1000 })"/>
    </PagerContent>
</MudDataGrid>

<PermissionsDrawer OnAssignAllChanged="OnAssignAllChangedHandler" Waiting="@_processing" OnOpenChanged="OnOpenChangedHandler" Open="_showPermissionsDrawer" Permissions="_permissions" OnAssignChanged="OnAssignChangedHandler"></PermissionsDrawer>

<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
    private UserManager<ApplicationUser> UserManager = null!;
    private RoleManager<ApplicationRole> RoleManager = null!;

    private int _defaultPageSize = 15;
    private HashSet<ApplicationUserDto> _selectedItems = new();
    private readonly ApplicationUserDto _currentDto = new();
    private string _searchString = string.Empty;
    private string _selectedTenantId = " ";
    private string Title { get; set; } = "Users";
    private List<PermissionModel> _permissions = new();
    private IList<Claim> _assignedClaims = default!;

    private TimeSpan RefreshInterval => TimeSpan.FromHours(2);
 

    private MudDataGrid<ApplicationUserDto> _table = null!;
    private bool _processing;
    private bool _showPermissionsDrawer;
    private bool _canCreate;
    private bool _canSearch;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canActive;
    private bool _canManageRoles;
    private bool _canRestPassword;
    private bool _canManagePermissions;
    private bool _canImport;
    private bool _canExport;
    private bool _loading;
    private bool _exporting;
    private bool _uploading;
    private List<string?> _roles = new();
    private string? _searchRole;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        RoleManager = ScopedServices.GetRequiredService<RoleManager<ApplicationRole>>();
        UserManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Delete)).Succeeded;
        _canActive = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Active)).Succeeded;
        _canManageRoles = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.ManageRoles)).Succeeded;
        _canRestPassword = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.RestPassword)).Succeeded;
        _canManagePermissions = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.ManagePermissions)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Export)).Succeeded;
        _roles = await RoleManager.Roles.Select(x => x.Name).ToListAsync();
    }

    private bool IsOnline(string username)
    {
        return UsersStateContainer.UsersByConnectionId.Any(x => x.Value.Equals(username, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<GridData<ApplicationUserDto>> ServerReload(GridState<ApplicationUserDto> state)
    {
        try
        {
            _loading = true;
            Expression<Func<ApplicationUser, bool>> searchPredicate = x =>
                  (x.UserName!.Contains(_searchString) ||
                 x.Email!.Contains(_searchString) ||
                 x.DisplayName!.Contains(_searchString) ||
                 x.PhoneNumber!.Contains(_searchString) ||
                 x.Provider!.Contains(_searchString)) &&
                (_searchRole == null || (_searchRole != null && x.UserRoles.Any(x => x.Role.Name == _searchRole))) &&
                (_selectedTenantId == " " || (_selectedTenantId != " " && x.TenantId == _selectedTenantId));
            var query = UserManager.Users.Where(searchPredicate);
            var items = await query
                .Include(x => x.UserRoles)
                .Include(x => x.Superior)
                .EfOrderBySortDefinitions(state)
                .Skip(state.Page * state.PageSize).Take(state.PageSize).ProjectTo<ApplicationUserDto>(Mapper.ConfigurationProvider).ToListAsync();
            var total = await UserManager.Users.CountAsync(searchPredicate);
            return new GridData<ApplicationUserDto> { TotalItems = total, Items = items };
        }
        finally
        {
            _loading = false;
        }
    }
    private async Task OnChangedListView(string tenantId)
    {
        _selectedTenantId = tenantId;
        await _table.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
        if (_loading)
            return;
        _searchString = text.ToLower();
        await _table.ReloadServerData();
    }

    private async Task OnSearchRole(string role)
    {
        if (_loading)
            return;
        _searchRole = role;
        await _table.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        await _table.ReloadServerData();
    }

    private async Task OnCreate()
    {
        var model = new ApplicationUserDto { Provider = "Local", Email = "", UserName = "", AssignedRoles = new[] { RoleName.Basic } };
        var parameters = new DialogParameters<UserFormDialog>
        {
            { x => x.Model, model }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<UserFormDialog>(L["Create a new user"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var applicationUser = new ApplicationUser
            {
                Provider = model.Provider,
                DisplayName = model.DisplayName,
                UserName = model.UserName,
                TenantId = model.TenantId,
                Email = model.Email,
                PhoneNumber = model.PhoneNumber,
                SuperiorId = model.SuperiorId,
                ProfilePictureDataUrl = model.ProfilePictureDataUrl,
                EmailConfirmed = true,
                IsActive = model.IsActive
            };
            var identityResult = await UserManager.CreateAsync(applicationUser);
            if (!identityResult.Succeeded)
            {
                Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
                return;
            }

            Snackbar.Add($"{L["New user created successfully."]}", Severity.Info);
            if (model.AssignedRoles is not null && model.AssignedRoles.Length > 0)
            {
                await UserManager.AddToRolesAsync(applicationUser, model.AssignedRoles);
            }
            else
            {
                await UserManager.AddToRoleAsync(applicationUser, RoleName.Basic);
            }

            if (applicationUser.IsActive)
            {
                var code = await UserManager.GeneratePasswordResetTokenAsync(applicationUser);
                await SendRestPasswordNotification(code, applicationUser.Id, applicationUser.Email, applicationUser.UserName);
                Snackbar.Add("Recovery email sent. Please check your inbox to set a new password.", Severity.Info);
            }

            Logger.LogInformation("Create a user succeeded. Username: {@UserName:l}, UserId: {@UserId}", applicationUser.UserName, applicationUser.Id);
            UserService.Refresh();
            await OnRefresh();
        }
    }

    private async Task OnEdit(ApplicationUserDto item)
    {
        var parameters = new DialogParameters<UserFormDialog>
        {
            { x => x.Model, item }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<UserFormDialog>(L["Edit the user"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var user = await UserManager.FindByIdAsync(item.Id!) ?? throw new NotFoundException($"The application user [{item.Id}] was not found.");
            var state = await AuthState;
            user.Email = item.Email;
            user.PhoneNumber = item.PhoneNumber;
            user.ProfilePictureDataUrl = item.ProfilePictureDataUrl;
            user.DisplayName = item.DisplayName;
            user.Provider = item.Provider;
            user.UserName = item.UserName;
            user.IsActive = item.IsActive;
            user.TenantId = item.TenantId;
            user.SuperiorId = item.SuperiorId;
            var identityResult = await UserManager.UpdateAsync(user);
            if (identityResult.Succeeded)
            {
                var roles = await UserManager.GetRolesAsync(user!);
                if (roles.Count > 0 )
                {
                    await UserManager.RemoveFromRolesAsync(user, roles);
                }

                if (item.AssignedRoles is not null && item.AssignedRoles.Length > 0)
                {
                    await UserManager.AddToRolesAsync(user, item.AssignedRoles);
                }

                Snackbar.Add($"{L["The user updated successfully."]}", Severity.Info);
                await OnRefresh();
                UserService.Refresh();
                await OnlineUserTracker.UpdateUser(new UserInfo(item.Id,
                                                                item.UserName,
                                                                item.Email,
                                                                item.DisplayName,
                                                                item.ProfilePictureDataUrl,
                                                                item.SuperiorName,
                                                                item.SuperiorId,
                                                                item.TenantId,
                                                                item.TenantName,
                                                                item.PhoneNumber,
                                                                item.AssignedRoles ?? Array.Empty<string>(),
                                                                UserPresence.Available));
            }
            else
            {
                Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
            }
        }
    }

    private async Task OnDelete(ApplicationUserDto dto)
    {
        var deleteContent = ConstantString.DeleteConfirmation;
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, string.Format(deleteContent, dto.UserName) }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<ConfirmationDialog>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // Requesting the current user id
            var state = await AuthState;
            var currentUserId = state.User.GetUserId();

            // Checks if the current user is trying to remove his own account
            if (currentUserId != null && currentUserId.Equals(dto.Id))
            {
                Snackbar.Add("You cannot delete your own account!", Severity.Error);
                return;
            }

            // Trying to find the user that needs to be deleted in the database (nullable check)
            var requestedDeletedUser = await UserManager.FindByIdAsync(dto.Id);
            if (requestedDeletedUser == null)
            {
                Snackbar.Add("The user doesn't seem to exist in the database!", Severity.Error);
                return;
            }

            // Trying to remove the requested user
            var deleteResult = await UserManager.DeleteAsync(requestedDeletedUser);
            if (!deleteResult.Succeeded)
            {
                Snackbar.Add($"{string.Join(",", deleteResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
                return;
            }

            Logger.LogInformation("Delete the user succeeded. Username: {@UserName:l}, UserId: {@UserId}", requestedDeletedUser.UserName, requestedDeletedUser.Id);
            Snackbar.Add($"{ConstantString.DeleteSuccess}", Severity.Info);
            await OnRefresh();
            UserService.Refresh();
        }
    }

    private async Task OnDeleteChecked()
    {
        var state = await AuthState;
        var currentUserId = state.User.GetUserId();
        var isSelectedItemContainCurrentUser = _selectedItems.Any(x => x.Id == currentUserId);

        if (isSelectedItemContainCurrentUser)
        {
            if (_selectedItems.Count == 1)
            {
                Snackbar.Add("You cannot delete your own account!", Severity.Error);
                return;
            }

            _selectedItems.Remove(_selectedItems.First(x => x.Id == currentUserId));
        }

        var deleteContent = ConstantString.DeleteConfirmation;
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, string.Format(deleteContent, _selectedItems.Count) }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<ConfirmationDialog>(L["Delete"], parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var deleteId = _selectedItems.Select(x => x.Id).ToArray();
            var deleteUsers = await UserManager.Users.Where(x => deleteId.Contains(x.Id)).ToListAsync();

            foreach (var deleteUser in deleteUsers)
            {
                var deleteResult = await UserManager.DeleteAsync(deleteUser);
                if (!deleteResult.Succeeded)
                {
                    Snackbar.Add($"{string.Join(",", deleteResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
                    return;
                }

                Logger.LogInformation("Delete the user succeeded. Username: {@UserName:l}, UserId: {@UserId}", deleteUser.UserName, deleteUser.Id);
            }

            Snackbar.Add($"{ConstantString.DeleteSuccess}", Severity.Info);
            await OnRefresh();
            UserService.Refresh();
        }
    }

    private async Task OnSetActive(ApplicationUserDto item)
    {
        var user = await UserManager.FindByIdAsync(item.Id!) ?? throw new NotFoundException($"Application user not found {item.Id}.");
        if (!user.IsActive)
        {
            var code = await UserManager.GeneratePasswordResetTokenAsync(user);
            await SendRestPasswordNotification(code, user.Id, user.Email!, user.UserName!);
            Snackbar.Add("Email sent. Please check your inbox to set a new password.", Severity.Info);

            user.IsActive = true;
            user.LockoutEnd = null;
            var identityResult = await UserManager.UpdateAsync(user);
            if (identityResult.Succeeded)
            {
                item.IsActive = true;
                item.LockoutEnd = null;
                Snackbar.Add($"{L["The user has been activated."]}", Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
            }
        }
        else
        {
            user.IsActive = false;
            user.LockoutEnd = DateTimeOffset.MaxValue;
            var identityResult = await UserManager.UpdateAsync(user);

            if (identityResult.Succeeded)
            {
                item.IsActive = false;
                item.LockoutEnd = DateTimeOffset.MaxValue;
                Snackbar.Add($"{L["The user has been inactivated."]}", Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
            }
        }
    }

    private async Task OnResetPassword(ApplicationUserDto item)
    {
        var model = new ResetPasswordFormModel { Id = item.Id, DisplayName = item.DisplayName, UserName = item.UserName, ProfilePictureDataUrl = item.ProfilePictureDataUrl };
        var parameters = new DialogParameters<ResetPasswordDialog>
        {
            { x => x.Model, model }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ResetPasswordDialog>(L["Set Password"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var user = await UserManager.FindByIdAsync(item.Id!) ?? throw new NotFoundException($"Application user not found {item.Id}.");

            var token = await UserManager.GeneratePasswordResetTokenAsync(user!);
            var state = await UserManager.ResetPasswordAsync(user!, token, model!.Password!);
            if (state.Succeeded)
            {
                if (user.EmailConfirmed == false)
                {
                    user.EmailConfirmed = true;
                    await UserManager.UpdateAsync(user);
                }

                Snackbar.Add($"{L["Reset password successfully"]}", Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", state.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
            }
        }
    }

    private async Task OnSetPermissions(ApplicationUserDto item)
    {
        _showPermissionsDrawer = true;
        _permissions = new List<PermissionModel>();
        _permissions = await GetAllPermissions(item);
    }

    private Task OnOpenChangedHandler(bool state)
    {
        _showPermissionsDrawer = state;
        return Task.CompletedTask;
    }

    private async Task<List<PermissionModel>> GetAllPermissions(ApplicationUserDto dto)
    {
        async Task<IList<Claim>> GetClaims(string userId)
        {
            var user = await UserManager.FindByIdAsync(dto.Id) ?? throw new NotFoundException($"not found application user: {userId}");
            var claims = await UserManager.GetClaimsAsync(user);
            return claims;
        }

        var key = $"get-claims-by-{dto.Id}";
        _assignedClaims = await FusionCache.GetOrSetAsync(key, _ => GetClaims(dto.Id), RefreshInterval);
        var allPermissions = new List<PermissionModel>();
        var modules = typeof(Permissions).GetNestedTypes();
        foreach (var module in modules)
        {
            var moduleName = string.Empty;
            var moduleDescription = string.Empty;
            if (module.GetCustomAttributes(typeof(DisplayNameAttribute), true)
                    .FirstOrDefault() is DisplayNameAttribute displayNameAttribute)
                moduleName = displayNameAttribute.DisplayName;

            if (module.GetCustomAttributes(typeof(DescriptionAttribute), true)
                    .FirstOrDefault() is DescriptionAttribute descriptionAttribute)
                moduleDescription = descriptionAttribute.Description;

            var fields = module.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);
            allPermissions.AddRange(from field in fields
                select field.GetValue(null)
                into propertyValue
                where propertyValue is not null
                select propertyValue.ToString()
                into claimValue
                select new PermissionModel
                {
                    UserId = dto.Id,
                    ClaimValue = claimValue,
                    ClaimType = ApplicationClaimTypes.Permission,
                    Group = moduleName,
                    Description = moduleDescription,
                    Assigned = _assignedClaims.Any(x => x.Value == claimValue)
                });
        }

        return allPermissions;
    }

    private async Task OnAssignAllChangedHandler(List<PermissionModel> models)
    {
        try
        {
            _processing = true;
            var userId = models.First().UserId;
            var user = await UserManager.FindByIdAsync(userId!) ?? throw new NotFoundException($"not found application user: {userId}");
            foreach (var model in models)
            {
                if (model.Assigned)
                {
                    if (model.ClaimType is not null && model.ClaimValue is not null)
                    {
                        await UserManager.AddClaimAsync(user, new Claim(model.ClaimType, model.ClaimValue));
                    }
                }
                else
                {
                    var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                    if (removed is not null)
                    {
                        await UserManager.RemoveClaimAsync(user, removed);
                    }
                }
            }

            Snackbar.Add($"{L["Authorization has been changed"]}", Severity.Info);
            await Task.Delay(300);
            var key = $"get-claims-by-{user.Id}";
            FusionCache.Remove(key);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task OnAssignChangedHandler(PermissionModel model)
    {
        try
        {
            _processing = true;
            var userId = model.UserId!;
            var user = await UserManager.FindByIdAsync(userId) ?? throw new NotFoundException($"Application user Not Found {userId}.");
            ;
            model.Assigned = !model.Assigned;
            if (model is { Assigned: true, ClaimType: not null, ClaimValue: not null })
            {
                await UserManager.AddClaimAsync(user, new Claim(model.ClaimType, model.ClaimValue));
                Snackbar.Add($"{L["Permission assigned successfully"]}", Severity.Info);
            }
            else
            {
                var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                if (removed is not null)
                {
                    await UserManager.RemoveClaimAsync(user, removed);
                }

                Snackbar.Add($"{L["Permission removed successfully"]}", Severity.Info);
            }

            var key = $"get-claims-by-{user.Id}";
            FusionCache.Remove(key);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task OnExport()
    {
        try
        {
            _exporting = true;
            Expression<Func<ApplicationUser, bool>> searchPredicate = x =>
                (x.UserName!.Contains(_searchString) ||
                 x.Email!.Contains(_searchString) ||
                 x.DisplayName!.Contains(_searchString) ||
                 x.PhoneNumber!.Contains(_searchString) ||
                 x.Provider!.Contains(_searchString)) &&
                (_searchRole == null || (_searchRole != null && x.UserRoles.Any(x => x.Role.Name == _searchRole))) &&
                (_selectedTenantId == " " || (_selectedTenantId != " " && x.TenantId ==_selectedTenantId));
            var items = await UserManager.Users.Where(searchPredicate)
                .Select(x => new ApplicationUserDto
                {
                    Id = x.Id,
                    UserName = x.UserName!,
                    DisplayName = x.DisplayName,
                    Email = x.Email!,
                    PhoneNumber = x.PhoneNumber,
                    TenantId = x.TenantId,
                    TenantName = x.Tenant.Name
                }).ToListAsync();
            var result = await ExcelService.ExportAsync(items,
                new Dictionary<string, Func<ApplicationUserDto, object?>>
                {
                    { L["Id"], item => item.Id },
                    { L["User Name"], item => item.UserName },
                    { L["Display Name"], item => item.DisplayName },
                    { L["Email"], item => item.Email },
                    { L["Phone Number"], item => item.PhoneNumber },
                    { L["Tenant Id"], item => item.TenantId },
                    { L["Tenant Name"], item => item.TenantName }
                }, L["Users"]);
            var downloadResult = await BlazorDownloadFileService.DownloadFile($"{L["Users"]}.xlsx", result, "application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", Severity.Info);
        }
        finally
        {
            _exporting = false;
        }
    }

    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream(GlobalVariable.MaxAllowedSize).CopyToAsync(stream);
        var result = await ExcelService.ImportAsync(stream.ToArray(), new Dictionary<string, Func<DataRow, ApplicationUser, object?>>
        {
            { L["User Name"], (row, item) => item.UserName = row[L["User Name"]]?.ToString() },
            { L["Display Name"], (row, item) => item.DisplayName = row[L["Display Name"]]?.ToString() },
            { L["Email"], (row, item) => item.Email = row[L["Email"]]?.ToString() },
            { L["Phone Number"], (row, item) => item.PhoneNumber = row[L["Phone Number"]]?.ToString() },
            { L["Tenant Id"], (row, item) => item.TenantId = row[L["Tenant Id"]]?.ToString() }
        }, L["Users"]);

        if (result.Succeeded)
        {
            foreach (var user in result.Data!)
            {
                if (!UserManager.Users.Any(x => x.UserName == user.UserName))
                {
                    var iResult = await UserManager.CreateAsync(user);
                    if (iResult.Succeeded)
                    {
                        await UserManager.AddToRolesAsync(user, new[] { RoleName.Basic });
                    }
                    else
                    {
                        Snackbar.Add($"{string.Join(',', iResult.Errors.Select(x => x.Description))}", Severity.Error);
                    }
                }
            }

            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.ImportSuccess}", Severity.Info);
        }
        else
        {
            foreach (var msg in result.Errors)
            {
                Snackbar.Add($"{msg}", Severity.Error);
            }
        }

        _uploading = false;
    }

    private async Task SendWelcomeNotification(string toEmail, string userName)
    {
        var callbackUrl = Navigation.GetUriWithQueryParameters(
            Navigation.ToAbsoluteUri(Login.PageUrl).AbsoluteUri,
            new Dictionary<string, object?> { ["returnUrl"] = "/" });

        await Mediator.Publish(new SendWelcomeNotification(callbackUrl, toEmail, userName));
        Logger.LogInformation("{UserName} Activated Successfully!", toEmail);
    }

    private async Task SendRestPasswordNotification(string code, string userId, string toEmail, string userName)
    {
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = Navigation.GetUriWithQueryParameters(
            Navigation.ToAbsoluteUri(ResetPassword.PageUrl).AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["token"] = code });
        await Mediator.Publish(new ResetPasswordNotification(callbackUrl, toEmail, userName));
        Logger.LogInformation("Rest password email sent to {0}.", toEmail);
    }

}